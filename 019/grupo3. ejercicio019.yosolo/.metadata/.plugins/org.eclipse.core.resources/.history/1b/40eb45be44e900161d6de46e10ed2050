package es.cic.curso.curso14.ejercicio016.repository;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertTrue;

import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.PersistenceException;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.TestExecutionListeners;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.test.context.support.DependencyInjectionTestExecutionListener;
import org.springframework.test.context.transaction.TransactionalTestExecutionListener;
import org.springframework.transaction.annotation.Transactional;

import es.cic.curso.curso14.ejercicio016.dominio.Sala;
import es.cic.curso.curso14.ejercicio016.dominio.Venta;
import es.cic.curso.curso14.ejercicio016.helper.TestHelper;

@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(
		locations={
				"classpath:es/cic/curso/curso14/ejercicio016/applicationContext.xml"
		})
@TestExecutionListeners({DependencyInjectionTestExecutionListener.class,
	TransactionalTestExecutionListener.class})
@Transactional
public class VentaRepositoryImplTest {

	@Autowired
	private VentaRepository sut;
	
	private Venta venta;
	
	@Before
	public void setUp() throws Exception {
		venta = new Venta(1,157,false);
		em.persist(producto);
	}

	@Override
	public IRepository<Long, Venta> getRepository() {
		return sut;
	}

	@Override
	public Venta getInstanceDeTParaNuevo() {
		Venta venta = new Venta();
		venta.setImporte(10);
		venta.setProducto(producto);
		venta.setUnidades(10);
		return venta;
	}

	@Override
	public Venta getInstanceDeTParaLectura() {
		Venta venta = new Venta();
		venta.setImporte(10);
		venta.setProducto(producto);
		venta.setUnidades(10);
		return venta;
	}

	@Override
	public boolean sonDatosIguales(Venta t1, Venta t2) {
		if (t1 == null || t2 == null) {
			throw new UnsupportedOperationException("No puedo comparar nulos");
		}
		if (t1.getImporte() != t2.getImporte()) {
			return false;
		}
		
		if (!t1.getProducto().equals(t2.getProducto())) {
			return false;
		}
		if (t1.getUnidades() != t2.getUnidades()) {
			return false;
		}
		
		
		return true;
	}

	@Override
	public Long getClavePrimariaNoExistente() {
		return Long.MAX_VALUE;
	}

	@Override
	public Venta getInstanceDeTParaModificar(Long clave) {
		Venta venta = getInstanceDeTParaLectura();
		venta.setId(clave);
		venta.setUnidades(5);
		return venta;
	}
}